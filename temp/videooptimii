import 'dart:math';
import 'package:cached_network_image/cached_network_image.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_swiper_null_safety/flutter_swiper_null_safety.dart';
import 'package:nb_utils/nb_utils.dart';
// import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:tharkyApp/Screens/Information.dart';
// import 'package:tharkyApp/Screens/Payment/subscriptions.dart';
import 'package:tharkyApp/Screens/Welcome.dart';
import 'package:tharkyApp/components/copole.dart';
import 'package:tharkyApp/components/item_video.dart';
import 'package:tharkyApp/models/user_model.dart';
import 'package:tharkyApp/swipe_stack.dart';
import 'package:tharkyApp/utils/colors.dart';

import 'package:easy_localization/easy_localization.dart';
import 'package:tharkyApp/utils/common.dart';
import 'package:tharkyApp/utils/constant.dart';
import 'package:tharkyApp/utils/model_keys.dart';
import 'package:tharkyApp/utils/string_extensions.dart';
import 'package:tharkyApp/utils/utls.dart';
import 'package:video_player/video_player.dart';

import '../lib/temp/Tab.dart';

List userRemoved = [];
int countswipe = 1;

class Swipes extends StatefulWidget {
  final List<User> users;
  final User currentUser;
  final int swipedcount;
  final Map items;
  Swipes(this.currentUser, this.users, this.swipedcount, this.items);

  @override
  _SwipesState createState() => _SwipesState();
}

class _SwipesState extends State<Swipes>
    with AutomaticKeepAliveClientMixin<Swipes> {
  Map<String, VideoPlayerController> controllers = {};

  int startingPositionIndex = 0;
  int position = 0;
  String? focusedIndex = "";
  bool isLoading = false;

  // TabbarState state = TabbarState();
  bool onEnd = false;
  //Ads _ads = new Ads();
  // InterstitialAd? _interstitialAd;
  // bool _isInterstitialAdReady = false;

  // late AdWidget adWidget;
  // final AdSize adSize = AdSize(height: 300, width: 50);

  bool _isBannerAdReady = true;

  GlobalKey<SwipeStackState> swipeKey = GlobalKey<SwipeStackState>();
  bool get wantKeepAlive => true;

  void initState() {
    startingPositionIndex = 1;
    initVideoPlayer();
    // InterstitialAd.load(Å“
    //     adUnitId: AdHelper.interstitialAdUnitId,
    //     request: AdRequest(),
    //     adLoadCallback: InterstitialAdLoadCallback(
    //       onAdLoaded: (InterstitialAd ad) {
    //         // Keep a reference to the ad so you can show it later.
    //         this._interstitialAd = ad;
    //       },
    //       onAdFailedToLoad: (LoadAdError error) {
    //         print('InterstitialAd failed to load: $error');
    //       },
    //     ));
    // adWidget = AdWidget(ad: myBanner);

    super.initState();
  }

  @override
  void dispose() {
    // _interstitialAd?.dispose();
    WidgetsBinding.instance.addPostFrameCallback((_) async {
      controllers.forEach((key, value) async {
        await value.dispose();
      });
    });

    super.dispose();
  }

  // final BannerAdListener listener = BannerAdListener(
  //   // Called when an ad is successfully received.
  //   onAdLoaded: (Ad ad) {
  //     print('Ad loaded.');
  //   },
  //   // Called when an ad request failed.
  //   onAdFailedToLoad: (Ad ad, LoadAdError error) {
  //     // Dispose the ad here to free resources.
  //     ad.dispose();
  //     print('Ad failed to load: $error');
  //   },
  //   // Called when an ad opens an overlay that covers the screen.
  //   onAdOpened: (Ad ad) => print('Ad opened.'),
  //   // Called when an ad removes an overlay that covers the screen.
  //   onAdClosed: (Ad ad) => print('Ad closed.'),
  //   // Called when an impression occurs on the ad.
  //   onAdImpression: (Ad ad) => print('Ad impression.'),
  // );

  @override
  Widget build(BuildContext context) {
    super.build(context);
    print(
        '//////////////////////////////-${widget.items}-///////////////////////////////////');

    int freeSwipe = widget.items['free_swipes'] ?? 10;
    bool exceedSwipes = widget.swipedcount >= freeSwipe;
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(),
        child: ClipRRect(
          child: Stack(
            children: [
              AbsorbPointer(
                absorbing: exceedSwipes,
                child: Stack(
                  children: <Widget>[
                    Container(
                      decoration:
                          BoxDecoration(color: whiteColor.withOpacity(.1)),
                      height: MediaQuery.of(context).size.height * .78,
                      width: MediaQuery.of(context).size.width,
                      child:
                          //onEnd ||
                          widget.users.length == 0
                              ? Align(
                                  alignment: Alignment.center,
                                  child: Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: <Widget>[
                                      Padding(
                                        padding: const EdgeInsets.all(8.0),
                                        child: CircleAvatar(
                                          backgroundColor: primaryColor,
                                          radius: 40,
                                        ),
                                      ),
                                      Text(
                                        "There's no one new around you."
                                            .tr()
                                            .toString(),
                                        textAlign: TextAlign.center,
                                        style: TextStyle(
                                            color: black,
                                            decoration: TextDecoration.none,
                                            fontWeight: FontWeight.w600,
                                            fontSize: 15),
                                      )
                                    ],
                                  ),
                                )
                              : SwipeStack(
                                  key: swipeKey,
                                  children: widget.users.map((
                                    index,
                                  ) {
                                    // Rks.logger.f(
                                    //                       "${controllers[position.index]} ------ = ${[
                                    //                     progress
                                    //                   ]}");
                                    return SwiperItem(builder:
                                        (SwiperPosition position,
                                            double progress) {
                                      return Material(
                                          elevation: 5,
                                          borderRadius: BorderRadius.all(
                                              Radius.circular(30)),
                                          child: Container(
                                            child: Stack(
                                              children: <Widget>[
                                                ClipRRect(
                                                  borderRadius:
                                                      BorderRadius.all(
                                                          Radius.circular(30)),
                                                  child: Swiper(
                                                    customLayoutOption:
                                                        CustomLayoutOption(
                                                      stateCount: 0,
                                                      startIndex: 0,
                                                    ),
                                                    key: UniqueKey(),
                                                    physics:
                                                        NeverScrollableScrollPhysics(),
                                                    itemBuilder:
                                                        (BuildContext context,
                                                            int index2) {
                                                      var isVideo =
                                                          "${index.images![index2]}"
                                                              .contains("fed");
                                                      var thecorectUrl = isVideo
                                                          ? index
                                                              .images![index2]
                                                          : imageUrl(
                                                              index.images![
                                                                  index2])!;

                                                      return Container(
                                                        height: MediaQuery.of(
                                                                    context)
                                                                .size
                                                                .height *
                                                            .78,
                                                        width: MediaQuery.of(
                                                                context)
                                                            .size
                                                            .width,
                                                        child: isVideo
                                                            ? ItemVideo(
                                                                videoPlayerController:
                                                                    controllers[
                                                                        index],
                                                                videoUrl:
                                                                    thecorectUrl,
                                                              )
                                                            : CachedNetworkImage(
                                                                imageUrl:
                                                                    thecorectUrl!,
                                                                fit: BoxFit
                                                                    .cover,
                                                                useOldImageOnUrlChange:
                                                                    true,
                                                                placeholder: (context,
                                                                        url) =>
                                                                    CupertinoActivityIndicator(
                                                                  radius: 20,
                                                                ),
                                                                errorWidget: (context,
                                                                        url,
                                                                        error) =>
                                                                    Icon(Icons
                                                                        .error),
                                                              ),
                                                      );
                                                    },
                                                    itemCount: 1,
                                                    // index.images!.length,
                                                    // pagination: new SwiperPagination(
                                                    //     alignment: Alignment
                                                    //         .bottomCenter,
                                                    //     builder: DotSwiperPaginationBuilder(
                                                    //         activeSize: 13,
                                                    //         color:
                                                    //             secondryColor,
                                                    //         activeColor:
                                                    //             primaryColor)),
                                                    // control: new SwiperControl(
                                                    //   color: primaryColor,
                                                    //   disableColor:
                                                    //       secondryColor,
                                                    // ),
                                                    loop: false,
                                                  ),
                                                ),
                                                Padding(
                                                  padding: const EdgeInsets.all(
                                                      48.0),
                                                  child: position.toString() ==
                                                          "SwiperPosition.Left"
                                                      ? Align(
                                                          alignment: Alignment
                                                              .topRight,
                                                          child:
                                                              Transform.rotate(
                                                            angle: pi / 8,
                                                            child: Container(
                                                              height: 40,
                                                              width: 100,
                                                              decoration: BoxDecoration(
                                                                  shape: BoxShape
                                                                      .rectangle,
                                                                  border: Border.all(
                                                                      width: 2,
                                                                      color: Colors
                                                                          .red)),
                                                              child: Center(
                                                                child: Text(
                                                                    "NOPE"
                                                                        .tr()
                                                                        .toString(),
                                                                    style: TextStyle(
                                                                        color: Colors
                                                                            .red,
                                                                        fontWeight:
                                                                            FontWeight
                                                                                .bold,
                                                                        fontSize:
                                                                            32)),
                                                              ),
                                                            ),
                                                          ),
                                                        )
                                                      : position.toString() ==
                                                              "SwiperPosition.Right"
                                                          ? Align(
                                                              alignment:
                                                                  Alignment
                                                                      .topLeft,
                                                              child: Transform
                                                                  .rotate(
                                                                angle: -pi / 8,
                                                                child:
                                                                    Container(
                                                                  height: 40,
                                                                  width: 100,
                                                                  decoration: BoxDecoration(
                                                                      shape: BoxShape
                                                                          .rectangle,
                                                                      border: Border.all(
                                                                          width:
                                                                              2,
                                                                          color:
                                                                              Colors.lightBlueAccent)),
                                                                  child: Center(
                                                                    child: Text(
                                                                        "LIKE"
                                                                            .tr()
                                                                            .toString(),
                                                                        style: TextStyle(
                                                                            color:
                                                                                Colors.lightBlueAccent,
                                                                            fontWeight: FontWeight.bold,
                                                                            fontSize: 32)),
                                                                  ),
                                                                ),
                                                              ),
                                                            )
                                                          : Container(),
                                                ),
                                                Padding(
                                                  padding:
                                                      const EdgeInsets.only(
                                                          bottom: 10),
                                                  child: Align(
                                                      alignment:
                                                          Alignment.bottomLeft,
                                                      child: Column(
                                                        mainAxisAlignment:
                                                            MainAxisAlignment
                                                                .end,
                                                        children: [
                                                          ListTile(
                                                              onTap: () {
                                                                // _loadInterstitialAd();

                                                                // _ads.myInterstitial()
                                                                //   ..load()
                                                                //   ..show();

                                                                //  if (_isBannerAdReady)
                                                                // _interstitialAd
                                                                //     ?.show();

                                                                showDialog(
                                                                    barrierDismissible:
                                                                        false,
                                                                    context:
                                                                        context,
                                                                    builder:
                                                                        (context) {
                                                                      return Info(
                                                                          index,
                                                                          widget
                                                                              .currentUser,
                                                                          swipeKey);
                                                                    });
                                                              },
                                                              title: Row(
                                                                children: [
                                                                  Text(
                                                                    // "${index.name}, ${index.about!['showMyAge'] != null ? !index.about!['showMyAge'] ? index.dob : "" : index.dob}",
                                                                    getEllipsisText(
                                                                        "${index.name}, ${getAge(index.dob!)}"),
                                                                    style: TextStyle(
                                                                        color: Colors
                                                                            .white,
                                                                        fontSize:
                                                                            25,
                                                                        fontWeight:
                                                                            FontWeight.bold),
                                                                  ),
                                                                  5.width,
                                                                  "asset/icons/verified.png"
                                                                      .iconImage2(
                                                                          size:
                                                                              20,
                                                                          color:
                                                                              Color(0xFF1D9BF0))
                                                                ],
                                                              ),
                                                              subtitle: Text(
                                                                "${index.about}",
                                                                style:
                                                                    TextStyle(
                                                                  color: Colors
                                                                      .white,
                                                                  fontSize: 16,
                                                                ),
                                                              )),
                                                          SizedBox(
                                                                  child: AsymmetricTagList(
                                                                      tags: index
                                                                          .interests!))
                                                              .paddingOnly(
                                                                  bottom: 20,
                                                                  right: 12)
                                                        ],
                                                      )),
                                                ),
                                              ],
                                            ),
                                          ));
                                    });
                                  }).toList(growable: true),
                                  threshold: 30,
                                  maxAngle: 100,
                                  visibleCount: 5,
                                  historyCount: 1,
                                  stackFrom: StackFrom.Top,
                                  translationInterval: 5,
                                  scaleInterval: 0.08,
                                  onSwipe: (int index,
                                      SwiperPosition position) async {
                                    // _adsCheck(countswipe);
                                    print(position);
                                    onPageChanged(index);

                                    if (position == SwiperPosition.Left) {
                                      // await docRef
                                      //     .doc(widget.currentUser.id)
                                      //     .collection("CheckedUser")
                                      //     .doc(widget.users[index].id)
                                      //     .set({
                                      //   'DislikedUser': widget.users[index].id,
                                      //   'timestamp': DateTime.now(),
                                      // }, SetOptions(merge: true));

                                      if (index < widget.users.length) {
                                        userRemoved.clear();
                                        setState(() {
                                          userRemoved.add(widget.users[index]);
                                          widget.users.removeAt(index);
                                        });
                                      }
                                    } else if (position ==
                                        SwiperPosition.Right) {
                                      if (likedByList
                                          .contains(widget.users[index].id)) {
                                        showDialog(
                                            context: context,
                                            builder: (ctx) {
                                              Future.delayed(
                                                  Duration(milliseconds: 1700),
                                                  () {
                                                Navigator.pop(ctx);
                                              });
                                              return Padding(
                                                padding: const EdgeInsets.only(
                                                    top: 80),
                                                child: Align(
                                                  alignment:
                                                      Alignment.topCenter,
                                                  child: Card(
                                                    child: Container(
                                                      height: 100,
                                                      width: 300,
                                                      child: Center(
                                                        child: Text(
                                                          "It's a match\n With ",
                                                          textAlign:
                                                              TextAlign.center,
                                                          style: TextStyle(
                                                              color:
                                                                  primaryColor,
                                                              fontSize: 30,
                                                              decoration:
                                                                  TextDecoration
                                                                      .none),
                                                        ).tr(args: [
                                                          '${widget.users[index].name}'
                                                        ]),
                                                      ),
                                                    ),
                                                  ),
                                                ),
                                              );
                                            });

                                        // await docRef
                                        //     .doc(widget.currentUser.id)
                                        //     .collection("Matches")
                                        //     .doc(widget.users[index].id)
                                        //     .set({
                                        //   'Matches': widget.users[index].id,
                                        //   'isRead': false,
                                        //   'userName': widget.users[index].name,
                                        //   'pictureUrl':
                                        //       widget.users[index].images![0],
                                        //   'timestamp':
                                        //       FieldValue.serverTimestamp()
                                        // }, SetOptions(merge: true));
                                        // await docRef
                                        //     .doc(widget.users[index].id)
                                        //     .collection("Matches")
                                        //     .doc(widget.currentUser.id)
                                        //     .set({
                                        //   'Matches': widget.currentUser.id,
                                        //   'userName': widget.currentUser.name,
                                        //   'pictureUrl':
                                        //       widget.currentUser.images![0],
                                        //   'isRead': false,
                                        //   'timestamp':
                                        //       FieldValue.serverTimestamp()
                                        // }, SetOptions(merge: true));
                                      }

                                      // await docRef
                                      //     .doc(widget.currentUser.id)
                                      //     .collection("CheckedUser")
                                      //     .doc(widget.users[index].id)
                                      //     .set({
                                      //   'LikedUser': widget.users[index].id,
                                      //   'timestamp':
                                      //       FieldValue.serverTimestamp(),
                                      // }, SetOptions(merge: true));
                                      // await docRef
                                      //     .doc(widget.users[index].id)
                                      //     .collection("LikedBy")
                                      //     .doc(widget.currentUser.id)
                                      //     .set({
                                      //   'LikedBy': widget.currentUser.id,
                                      //   'timestamp':
                                      //       FieldValue.serverTimestamp()
                                      // }, SetOptions(merge: true));

                                      if (index < widget.users.length) {
                                        userRemoved.clear();
                                        setState(() {
                                          userRemoved.add(widget.users[index]);
                                          widget.users.removeAt(index);
                                        });
                                      }
                                    } else
                                      debugPrint("onSwipe $index $position");
                                  },
                                  onRewind:
                                      (int index, SwiperPosition position) {
                                    swipeKey.currentContext!
                                        .dependOnInheritedWidgetOfExactType();
                                    widget.users.insert(index, userRemoved[0]);
                                    setState(() {
                                      userRemoved.clear();
                                    });
                                    debugPrint("onRewind $index $position");
                                    print(widget.users[index].id);
                                  },
                                ),
                    ),
                    Align(
                      alignment: Alignment.bottomCenter,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        crossAxisAlignment: CrossAxisAlignment.end,
                        children: <Widget>[
                          // widget.users.length != 0
                          //     ? FloatingActionButton(
                          //         heroTag: UniqueKey(),
                          //         backgroundColor: Colors.white,
                          //         shape: CircleBorder(),
                          //         child:
                          //             "asset/icons/${userRemoved.length > 0 ? "redo" : "not_intersted"}.png"
                          //                 .iconImage2(
                          //                     size: 20,
                          //                     color: userRemoved.length > 0
                          //                         ? Colors.amber
                          //                         : secondryColor),
                          //         onPressed: () {
                          //           if (userRemoved.length > 0) {
                          //             swipeKey.currentState!.rewind();
                          //           }
                          //         })
                          //     : FloatingActionButton(
                          //         heroTag: UniqueKey(),
                          //         backgroundColor: Colors.white,
                          //         shape: CircleBorder(),
                          //         child: Icon(
                          //           Icons.refresh,
                          //           color: Colors.green,
                          //           size: 20,
                          //         ),
                          //         onPressed: () {},
                          //       ),
                          FloatingActionButton(
                              heroTag: UniqueKey(),
                              backgroundColor: Color(0xFFFEEEE3),
                              shape: CircleBorder(),
                              child: "asset/icons/clear_simple.png"
                                  .iconImage2(size: 20, color: redColor),
                              onPressed: () {
                                if (widget.users.length > 0) {
                                  print("object");
                                  swipeKey.currentState!.swipeLeft();
                                }
                              }),
                          FloatingActionButton(
                              heroTag: UniqueKey(),
                              shape: CircleBorder(),
                              backgroundColor: Color(0xFF419df9),
                              child: "asset/icons/supperlike.png"
                                  .iconImage2(size: 25, color: whiteColor),
                              onPressed: () {
                                if (widget.users.length > 0) {
                                  swipeKey.currentState!.swipeRight();
                                }
                              }),
                          FloatingActionButton(
                              heroTag: UniqueKey(),
                              shape: CircleBorder(),
                              backgroundColor: primaryColor,
                              child: Icon(
                                Icons.favorite,
                                color: whiteColor,
                                size: 30,
                              ),
                              onPressed: () {
                                if (widget.users.length > 0) {
                                  swipeKey.currentState!.swipeRight();
                                }
                              }),
                        ],
                      ),
                    ).paddingAll(25),
                  ],
                ),
              ),
              exceedSwipes
                  ? Align(
                      alignment: Alignment.center,
                      child: InkWell(
                          child: Container(
                            color: Colors.white.withOpacity(.3),
                            child: Dialog(
                              insetAnimationCurve: Curves.bounceInOut,
                              insetAnimationDuration: Duration(seconds: 2),
                              shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(20)),
                              backgroundColor: Colors.white,
                              child: Container(
                                height:
                                    MediaQuery.of(context).size.height * .55,
                                child: Column(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceEvenly,
                                  crossAxisAlignment: CrossAxisAlignment.center,
                                  children: [
                                    Icon(
                                      Icons.error_outline,
                                      size: 50,
                                      color: primaryColor,
                                    ),
                                    Text(
                                      "you have already used the maximum number of free available swipes for 24 hrs."
                                          .tr()
                                          .toString(),
                                      textAlign: TextAlign.center,
                                      style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                          color: Colors.grey,
                                          fontSize: 20),
                                    ),
                                    Padding(
                                      padding: const EdgeInsets.all(8.0),
                                      child: Icon(
                                        Icons.lock_outline,
                                        size: 120,
                                        color: primaryColor,
                                      ),
                                    ),
                                    Text(
                                      "For swipe more users just subscribe our premium plans."
                                          .tr()
                                          .toString(),
                                      textAlign: TextAlign.center,
                                      style: TextStyle(
                                          color: primaryColor,
                                          fontWeight: FontWeight.bold,
                                          fontSize: 20),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),
                          // onTap: () => Navigator.push(
                          //     context,
                          //     MaterialPageRoute(
                          //         builder: (context) =>
                          //             Subscription(null, null, widget.items)))),

                          onTap: () => Navigator.push(
                              context,
                              MaterialPageRoute(
                                  builder: (context) => Welcome()))),
                    )
                  : Container()
            ],
          ),
        ),
      ),
    );
  }

  void _playNext(String index) {
    controllers.forEach((key, value) {
      if (value.value.isPlaying) {
        value.pause();
      }
    });
    _stopControllerAtIndex(getRelativeKey(controllers, index, -1));
    _disposeControllerAtIndex(getRelativeKey(controllers, index, -2));
    _playControllerAtIndex(getRelativeKey(controllers, index, 0));
    _initializeControllerAtIndex(getRelativeKey(controllers, index, 1));
  }

  void _playPrevious(int index) {
    controllers.forEach((key, value) {
      value.pause();
    });
    _stopControllerAtIndex(dcl(index + 1, isPrevious: false));
    _disposeControllerAtIndex(dcl(index + 2, isPrevious: false));
    _playControllerAtIndex(index);
    _initializeControllerAtIndex(dcl(index - 1, isPrevious: true));
  }

  Future _initializeControllerAtIndex(String? index) async {
    final VideoPlayerController controller = VideoPlayerController.networkUrl(
        Uri.parse(videoUrl(widget.users[index].images![0])!));
    controllers[index] = controller;
    await controller.initialize().then((value) {
      setState(() {});
    });
    log('ðŸš€ðŸš€ðŸš€ INITIALIZED $index');
  }

  void _playControllerAtIndex(String? index) {
    focusedIndex = index;
    if (controllers.containsKey(index)) {
      final controller = controllers[index];
      if (controller != null) {
        controller.play();
        controller.setLooping(true);
        // ApiService().increasePostViewCount(mList[index].postId.toString());
        log('ðŸš€ðŸš€ðŸš€ PLAYING $index');
        setState(() {});
      }
    }
  }

  void _stopControllerAtIndex(String? index) {
    if (controllers.containsKey(index)) {
      final controller = controllers[index];
      if (controller != null) {
        controller.pause();
        controller.seekTo(const Duration());
        log('==================================');
        log('ðŸš€ðŸš€ðŸš€ STOPPED $index');
      }
    }
  }

  void _disposeControllerAtIndex(String? index) {
    if (controllers.containsKey(index)) {
      final controller = controllers[index];
      controller?.dispose();
      if (controller != null) {
        controllers.remove(controller);
      }
      log('ðŸš€ðŸš€ðŸš€ DISPOSED $index');
    }
  }

  void initVideoPlayer() async {
    if (isVideofed(widget.users[position].images![0])) {
      await _initializeControllerAtIndex(position);
      _playControllerAtIndex(position);
    }

    if (isVideofed(widget.users[position - 1].images![0]) && position >= 0) {
      await _initializeControllerAtIndex(position - 1);
    }
    if (isVideofed(widget.users[position + 1].images![0])) {
      await _initializeControllerAtIndex(position + 1);
    }
  }

  void onPageChanged(int value) {
    Rks.logger.d("  ------ = ${[value]}");

    if (value == 3) {
      if (!isLoading) {
        isLoading = !isLoading;
        Rks.callApiForYou(
          start: startingPositionIndex.toString(),
          limit: paginationLimit.toString(),
        ).then((v) async {
          startingPositionIndex += paginationLimit;
          isLoading = !isLoading;
        });
      }
    }
    if (isVideofed("${widget.users[value].images![0]}")) {
      if (value > focusedIndex) {
        _playNext(widget.users[value].iid);
      } else {
        _playPrevious(widget.users[value].iid);
      }
    }
  }

  int dcl(int index, {required bool isPrevious}) {
    int step = isPrevious ? -1 : 1;
    int currentIndex = index;

    while (controllers.containsKey(currentIndex) == false) {
      currentIndex += step;
      if (currentIndex < 0) break; // Avoid negative index for previous keys
    }

    return currentIndex;
  }

  // void _loadInterstitialAd() {
  //   InterstitialAd.load(
  //     adUnitId: AdHelper.interstitialAdUnitId,
  //     request: AdRequest(),
  //     adLoadCallback: InterstitialAdLoadCallback(
  //       onAdLoaded: (ad) {
  //         this._interstitialAd = ad;

  //         ad.fullScreenContentCallback = FullScreenContentCallback(
  //           onAdDismissedFullScreenContent: (ad) {
  //             //  _moveToHome();
  //           },
  //         );

  //         _isInterstitialAdReady = true;
  //       },
  //       onAdFailedToLoad: (err) {
  //         print('Failed to load an interstitial ad: ${err.message}');
  //         _isInterstitialAdReady = false;
  //       },
  //     ),
  //   );
  // }
}
